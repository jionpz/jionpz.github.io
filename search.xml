<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KUKA机器人数据采集方案探索</title>
      <link href="/2024/11/09/KUKA%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88%E6%8E%A2%E7%B4%A2/"/>
      <url>/2024/11/09/KUKA%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="KUKAVARPROXY"><a href="#KUKAVARPROXY" class="headerlink" title="KUKAVARPROXY"></a>KUKAVARPROXY</h2><p><strong>1、KUKA机器人端开启KUKAVARPROXY</strong></p><p>具体如何开启，请看<a href="https://github.com/ImtsSrl/KUKAVARPROXY%E7%9A%84readme%E3%80%82">https://github.com/ImtsSrl/KUKAVARPROXY的readme。</a></p><img src="https://cdn.jsdelivr.net/gh/Eric76-Z/jion-zone-img@main/img/202411091844826.png" alt="image-20241109184422714" style="zoom: 80%;" /><p><strong>2、KUKA控制系统中，开启端口</strong></p><p>KUKAVARPROXY默认使用7000端口。</p><p><img src="https://cdn.jsdelivr.net/gh/Eric76-Z/jion-zone-img@main/img/202411091847921.png" alt="image-20241109184748877"></p><p><strong>3、使用客户端去连接机器人</strong></p><p>样例代码如下，转载至：<a href="https://github.com/linuxsand/py_openshowvar">https://github.com/linuxsand/py_openshowvar</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A Python port of KUKA VarProxy client (OpenShowVar).</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">__version__ = <span class="string">&#x27;1.1.7&#x27;</span></span><br><span class="line">ENCODING = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line"></span><br><span class="line">PY2 = sys.version_info[<span class="number">0</span>] == <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> PY2: <span class="built_in">input</span> = raw_input</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">openshowvar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ip = ip</span><br><span class="line">        <span class="variable language_">self</span>.port = port</span><br><span class="line">        <span class="variable language_">self</span>.msg_id = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.sock.connect((<span class="variable language_">self</span>.ip, <span class="variable language_">self</span>.port))</span><br><span class="line">        <span class="keyword">except</span> socket.error:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_connection</span>(<span class="params">self</span>):</span><br><span class="line">        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret = sock.connect_ex((<span class="variable language_">self</span>.ip, <span class="variable language_">self</span>.port))</span><br><span class="line">            <span class="keyword">return</span> ret == <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span> socket.error:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;socket error&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    can_connect = <span class="built_in">property</span>(test_connection)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, var, debug=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(var, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Var name is a string&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.varname = var <span class="keyword">if</span> PY2 <span class="keyword">else</span> var.encode(ENCODING)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._read_var(debug)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self, var, value, debug=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">isinstance</span>(var, <span class="built_in">str</span>) <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">str</span>)):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Var name and its value should be string&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.varname = var <span class="keyword">if</span> PY2 <span class="keyword">else</span> var.encode(ENCODING)</span><br><span class="line">        <span class="variable language_">self</span>.value = value <span class="keyword">if</span> PY2 <span class="keyword">else</span> value.encode(ENCODING)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._write_var(debug)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read_var</span>(<span class="params">self, debug</span>):</span><br><span class="line">        req = <span class="variable language_">self</span>._pack_read_req()</span><br><span class="line">        <span class="variable language_">self</span>._send_req(req)</span><br><span class="line">        _value = <span class="variable language_">self</span>._read_rsp(debug)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="built_in">print</span>(_value)</span><br><span class="line">        <span class="keyword">return</span> _value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_write_var</span>(<span class="params">self, debug</span>):</span><br><span class="line">        req = <span class="variable language_">self</span>._pack_write_req()</span><br><span class="line">        <span class="variable language_">self</span>._send_req(req)</span><br><span class="line">        _value = <span class="variable language_">self</span>._read_rsp(debug)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="built_in">print</span>(_value)</span><br><span class="line">        <span class="keyword">return</span> _value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_send_req</span>(<span class="params">self, req</span>):</span><br><span class="line">        <span class="variable language_">self</span>.rsp = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.sock.sendall(req)</span><br><span class="line">        <span class="variable language_">self</span>.rsp = <span class="variable language_">self</span>.sock.recv(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_pack_read_req</span>(<span class="params">self</span>):</span><br><span class="line">        var_name_len = <span class="built_in">len</span>(<span class="variable language_">self</span>.varname)</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        req_len = var_name_len + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> struct.pack(</span><br><span class="line">            <span class="string">&#x27;!HHBH&#x27;</span>+<span class="built_in">str</span>(var_name_len)+<span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">            <span class="variable language_">self</span>.msg_id,</span><br><span class="line">            req_len,</span><br><span class="line">            flag,</span><br><span class="line">            var_name_len,</span><br><span class="line">            <span class="variable language_">self</span>.varname</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_pack_write_req</span>(<span class="params">self</span>):</span><br><span class="line">        var_name_len = <span class="built_in">len</span>(<span class="variable language_">self</span>.varname)</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        value_len = <span class="built_in">len</span>(<span class="variable language_">self</span>.value)</span><br><span class="line">        req_len = var_name_len + <span class="number">3</span> + <span class="number">2</span> + value_len</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> struct.pack(</span><br><span class="line">            <span class="string">&#x27;!HHBH&#x27;</span>+<span class="built_in">str</span>(var_name_len)+<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;H&#x27;</span>+<span class="built_in">str</span>(value_len)+<span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">            <span class="variable language_">self</span>.msg_id,</span><br><span class="line">            req_len,</span><br><span class="line">            flag,</span><br><span class="line">            var_name_len,</span><br><span class="line">            <span class="variable language_">self</span>.varname,</span><br><span class="line">            value_len,</span><br><span class="line">            <span class="variable language_">self</span>.value</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read_rsp</span>(<span class="params">self, debug=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.rsp <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        var_value_len = <span class="built_in">len</span>(<span class="variable language_">self</span>.rsp) - struct.calcsize(<span class="string">&#x27;!HHBH&#x27;</span>) - <span class="number">3</span></span><br><span class="line">        result = struct.unpack(<span class="string">&#x27;!HHBH&#x27;</span>+<span class="built_in">str</span>(var_value_len)+<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;3s&#x27;</span>, <span class="variable language_">self</span>.rsp)</span><br><span class="line">        _msg_id, body_len, flag, var_value_len, var_value, isok = result</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[DEBUG]&#x27;</span>, result)</span><br><span class="line">        <span class="keyword">if</span> result[-<span class="number">1</span>].endswith(<span class="string">b&#x27;\x01&#x27;</span>) <span class="keyword">and</span> _msg_id == <span class="variable language_">self</span>.msg_id:</span><br><span class="line">            <span class="variable language_">self</span>.msg_id = (<span class="variable language_">self</span>.msg_id + <span class="number">1</span>) % <span class="number">65536</span>  <span class="comment"># format char &#x27;H&#x27; is 2 bytes long</span></span><br><span class="line">            <span class="keyword">return</span> var_value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############### test ###############</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_shell</span>(<span class="params">ip, port</span>):</span><br><span class="line">    client = openshowvar(ip, port)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> client.can_connect:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Connection error&#x27;</span>)</span><br><span class="line">        <span class="keyword">import</span> sys</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nConnected KRC Name: &#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    client.read(<span class="string">&#x27;$ROBNAME[]&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&#x27;\nInput var_name [, var_value]\n(`q` for quit): &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data.lower() == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Bye&#x27;</span>)</span><br><span class="line">            client.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parts = data.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(parts) == <span class="number">1</span>:</span><br><span class="line">                client.read(data.strip(), <span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                client.write(parts[<span class="number">0</span>], parts[<span class="number">1</span>].lstrip(), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip = <span class="built_in">input</span>(<span class="string">&#x27;IP Address: &#x27;</span>)</span><br><span class="line">    port = <span class="built_in">input</span>(<span class="string">&#x27;Port: &#x27;</span>)</span><br><span class="line">    run_shell(ip, <span class="built_in">int</span>(port))</span><br></pre></td></tr></table></figure><p>也可以使用其他客户端，可以在相关github项目中获取：</p><p><a href="https://github.com/ImtsSrl/openshowvar">https://github.com/ImtsSrl/openshowvar</a></p><p><a href="https://github.com/OpenKuka/KukavarClient">https://github.com/OpenKuka/KukavarClient</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> KUKA </tag>
            
            <tag> 数据采集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>quick-guide</title>
      <link href="/2024/11/04/quick-guide/"/>
      <url>/2024/11/04/quick-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows相关"><a href="#Windows相关" class="headerlink" title="Windows相关"></a>Windows相关</h1><p><a href="https://rizonesoft.com/downloads/complete-internet-repair/">网络修复工具</a></p><h1 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h1><ol><li><a href="https://gitcode.csdn.net/65e6e87f1a836825ed7879c9.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MTIyMTI3OCwiZXhwIjoxNzMwODE1MzY0LCJpYXQiOjE3MzAyMTA1NjQsInVzZXJuYW1lIjoiaGFzYWlpaSJ9.9xIwzpr8ZblDzhKAQMd9hmJftEx-UwAiJ842WTl7u8w&spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~activity-1-129362462-blog-110559838.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~activity-1-129362462-blog-110559838.235%5Ev43%5Econtrol&utm_relevant_index=2">NodeJS安装-1</a></li><li><a href="https://www.cnblogs.com/yang37/p/18423524">NodeJS安装以及pnpm安装</a></li></ol><h1 id="电视直播相关"><a href="#电视直播相关" class="headerlink" title="电视直播相关"></a>电视直播相关</h1><p><a href="https://www.upx8.com/2822">TVbox 电视TV盒子APK（持续更新）</a></p><p><strong>电视直播</strong><br>公众号：科技长青<br>关键词： tvbox，电视直播</p><h1 id="NAS相关"><a href="#NAS相关" class="headerlink" title="NAS相关"></a>NAS相关</h1><p><a href="https://docs.zerotier.com/synology/">如何在群晖中使用Zerotier</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客相关</title>
      <link href="/2024/11/04/about-blog-1/"/>
      <url>/2024/11/04/about-blog-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/10/hello-world/"/>
      <url>/2024/09/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
